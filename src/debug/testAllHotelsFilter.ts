import { lostItemsService } from '../services/firebase/lostItemsService';
import { permissionsService } from '../services/firebase/permissionsService';
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../lib/firebase';

/**
 * Script de test pour diagnostiquer le probl√®me du filtre "Tous les h√¥tels"
 */
export async function testAllHotelsFilter(userEmail: string) {
  console.log('üîç [TEST] D√©marrage du test pour le filtre "Tous les h√¥tels"');
  console.log('üë§ [TEST] Utilisateur:', userEmail);
  
  try {
    // Test 1: V√©rifier les permissions de l'utilisateur
    console.log('\nüìã [TEST] Test 1: V√©rification des permissions utilisateur');
    const user = await permissionsService.getCurrentUser(userEmail);
    console.log('üë§ [TEST] Utilisateur trouv√©:', user ? 'Oui' : 'Non');
    if (user) {
      console.log('üë§ [TEST] R√¥le:', user.role);
      console.log('üë§ [TEST] H√¥tels autoris√©s:', user.hotels);
      console.log('üë§ [TEST] Est admin:', user.role === 'system_admin' ? 'Oui' : 'Non');
    }
    
    // Test 2: V√©rifier les h√¥tels accessibles
    console.log('\nüìã [TEST] Test 2: V√©rification des h√¥tels accessibles');
    const accessibleHotels = await permissionsService.getAccessibleHotels(userEmail);
    console.log('üè® [TEST] H√¥tels accessibles:', accessibleHotels);
    console.log('üè® [TEST] Est admin (all):', accessibleHotels.includes('all') ? 'Oui' : 'Non');
    
    // Test 3: V√©rifier l'application du filtre h√¥tel
    console.log('\nüìã [TEST] Test 3: Application du filtre h√¥tel');
    const hotelFilter = 'all';
    const filteredHotels = await permissionsService.applyHotelFilter(userEmail, hotelFilter);
    console.log('üè® [TEST] Filtre demand√©:', hotelFilter);
    console.log('üè® [TEST] H√¥tels filtr√©s:', filteredHotels);
    
    // Test 4: V√©rifier la collection lost_items directement
    console.log('\nüìã [TEST] Test 4: V√©rification directe de la collection lost_items');
    const lostItemsSnapshot = await getDocs(collection(db, 'lost_items'));
    console.log('üìä [TEST] Nombre total d\'objets trouv√©s dans Firestore:', lostItemsSnapshot.size);
    
    if (lostItemsSnapshot.size > 0) {
      // Extraire les h√¥tels uniques pour voir quels h√¥tels sont pr√©sents
      const uniqueHotels = new Set<string>();
      lostItemsSnapshot.docs.forEach((doc: any) => {
        const data = doc.data();
        if (data.hotelId) uniqueHotels.add(data.hotelId);
      });
      console.log('üè® [TEST] H√¥tels pr√©sents dans la collection:', Array.from(uniqueHotels));
      
      // Afficher un √©chantillon de document
      const sampleDoc = lostItemsSnapshot.docs[0].data();
      console.log('üìÑ [TEST] Exemple de document:', {
        id: lostItemsSnapshot.docs[0].id,
        hotelId: sampleDoc.hotelId,
        description: sampleDoc.description,
        discoveryDate: sampleDoc.discoveryDate
      });
    }
    
    // Test 5: Tester le service avec diff√©rents filtres
    console.log('\nüìã [TEST] Test 5: Test du service avec diff√©rents filtres');
    
    // 5.1 - Filtre "Tous les h√¥tels"
    console.log('\nüîç [TEST] 5.1 - Filtre "Tous les h√¥tels"');
    const allHotelsItems = await lostItemsService.getLostItems(userEmail, 'all');
    console.log('üìä [TEST] Nombre d\'objets avec filtre "all":', allHotelsItems.length);
    
    // 5.2 - Sans filtre (devrait √™tre √©quivalent √† "all")
    console.log('\nüîç [TEST] 5.2 - Sans filtre');
    const noFilterItems = await lostItemsService.getLostItems(userEmail);
    console.log('üìä [TEST] Nombre d\'objets sans filtre:', noFilterItems.length);
    
    // 5.3 - Si des h√¥tels sont disponibles, tester avec un h√¥tel sp√©cifique
    if (accessibleHotels.length > 0 && accessibleHotels[0] !== 'all') {
      const specificHotel = accessibleHotels[0];
      console.log('\nüîç [TEST] 5.3 - Filtre sur h√¥tel sp√©cifique:', specificHotel);
      const specificHotelItems = await lostItemsService.getLostItems(userEmail, specificHotel);
      console.log('üìä [TEST] Nombre d\'objets pour h√¥tel sp√©cifique:', specificHotelItems.length);
    }
    
    return {
      success: true,
      allHotelsCount: allHotelsItems.length,
      noFilterCount: noFilterItems.length,
      totalInFirestore: lostItemsSnapshot.size,
      accessibleHotels
    };
    
  } catch (error) {
    console.error('‚ùå [TEST] Erreur lors du test:', error);
    return {
      success: false,
      error
    };
  }
}

// Fonction pour ex√©cuter le test avec un utilisateur sp√©cifique
export function runTest(userEmail: string) {
  console.log('üß™ [TEST] Ex√©cution du test pour:', userEmail);
  return testAllHotelsFilter(userEmail)
    .then(result => {
      console.log('\n‚úÖ [TEST] R√©sultat du test:', result);
      return result;
    })
    .catch(error => {
      console.error('\n‚ùå [TEST] Erreur lors de l\'ex√©cution du test:', error);
      return { success: false, error };
    });
}
